KETLYN ::= init_program RECURSIVE_STATEMENT close_program
KETLYN ::= î
RECURSIVE_STATEMENT ::= STATEMENT RECURSIVE_STATEMENT
RECURSIVE_STATEMENT ::= î
STATEMENT ::= WRITE
STATEMENT ::= READ
STATEMENT ::= CONDITIONAL
STATEMENT ::= LOOP
STATEMENT ::= DECLARATION
STATEMENT ::= ASSIGNMENT
WRITE ::= write "(" ANY_EXPRESSION ")" ";"
READ ::= read "(" id ")" ";"
CONDITIONAL ::= IF ELSE endif
IF ::= if "(" LOGICAL_EXPRESSION ")" RECURSIVE_STATEMENT
ELSE ::= else RECURSIVE_STATEMENT
ELSE ::= î
LOOP ::= WHILE endloop
WHILE ::= loop "(" LOGICAL_EXPRESSION ")" RECURSIVE_STATEMENT
DECLARATION ::= var id ";"
ASSIGNMENT ::= id "=" BASIC_EXPRESSION ";"
BASIC_EXPRESSION ::= id BASIC_OPERATOR
BASIC_EXPRESSION ::= number BASIC_OPERATOR
BASIC_EXPRESSION ::= "+" BASIC_EXPRESSION
BASIC_EXPRESSION ::= "-" BASIC_EXPRESSION
BASIC_EXPRESSION ::= "(" BASIC_EXPRESSION ")" BASIC_OPERATOR
BASIC_OPERATOR ::= "+" BASIC_EXPRESSION
BASIC_OPERATOR ::= "-" BASIC_EXPRESSION
BASIC_OPERATOR ::= "*" BASIC_EXPRESSION
BASIC_OPERATOR ::= "/" BASIC_EXPRESSION
BASIC_OPERATOR ::= î
STRING_EXPRESSION ::= string_literal
ID_OR_NUMBER ::= id
ID_OR_NUMBER ::= number
ANY_EXPRESSION ::= BASIC_EXPRESSION
ANY_EXPRESSION ::= STRING_EXPRESSION
LOGICAL_OPERATOR ::= "<"
LOGICAL_OPERATOR ::= ">"
LOGICAL_EXPRESSION ::= ID_OR_NUMBER LOGICAL_OPERATOR ID_OR_NUMBER
